module "convolve"
stage raw

func @conv2d_1: (<1 x 4 x 5 x 5 x f32>, <8 x 4 x 3 x 3 x f32>) -> <1 x 8 x 3 x 3 x f32> {
'entry(%input: <1 x 4 x 5 x 5 x f32>, %kernel: <8 x 4 x 3 x 3 x f32>):
    %0.0 = convolve %input: <1 x 4 x 5 x 5 x f32> kernel %kernel: <8 x 4 x 3 x 3 x f32>
    return %0.0: <1 x 8 x 3 x 3 x f32>
}

func @conv2d_2: (<100 x 4 x 5 x 5 x f32>, <10 x 4 x 3 x 3 x f32>) -> <100 x 10 x 3 x 3 x f32> {
'entry(%input: <100 x 4 x 5 x 5 x f32>, %kernel: <10 x 4 x 3 x 3 x f32>):
    %0.0 = convolve %input: <100 x 4 x 5 x 5 x f32> kernel %kernel: <10 x 4 x 3 x 3 x f32>
    return %0.0: <100 x 10 x 3 x 3 x f32>
}

func @conv2d_3: (<1 x 10 x 32 x 48 x f32>, <8 x 10 x 3 x 3 x f32>) -> <1 x 8 x 30 x 46 x f32> {
'entry(%input: <1 x 10 x 32 x 48 x f32>, %kernel: <8 x 10 x 3 x 3 x f32>):
    %0.0 = convolve %input: <1 x 10 x 32 x 48 x f32> kernel %kernel: <8 x 10 x 3 x 3 x f32>
    return %0.0: <1 x 8 x 30 x 46 x f32>
}

func @conv2d_4: (<1 x 10 x 32 x 48 x f32>, <8 x 10 x 3 x 3 x f32>) -> <1 x 8 x 32 x 50 x f32> {
'entry(%input: <1 x 10 x 32 x 48 x f32>, %kernel: <8 x 10 x 3 x 3 x f32>):
    %0.0 = convolve %input: <1 x 10 x 32 x 48 x f32> kernel %kernel: <8 x 10 x 3 x 3 x f32> padding (1, 1), (2, 2)
    return %0.0: <1 x 8 x 32 x 50 x f32>
}

func @conv2d_5: (<1 x 10 x 32 x 48 x f32>, <8 x 10 x 3 x 3 x f32>) -> <1 x 8 x 16 x 13 x f32> {
'entry(%input: <1 x 10 x 32 x 48 x f32>, %kernel: <8 x 10 x 3 x 3 x f32>):
    %0.0 = convolve %input: <1 x 10 x 32 x 48 x f32> kernel %kernel: <8 x 10 x 3 x 3 x f32> strides 2, 4 padding (1, 1), (2, 2)
    return %0.0: <1 x 8 x 16 x 13 x f32>
}

func @conv2d_6: (<1 x 10 x 32 x 48 x f32>, <8 x 10 x 3 x 3 x f32>) -> <1 x 8 x 15 x 10 x f32> {
'entry(%input: <1 x 10 x 32 x 48 x f32>, %kernel: <8 x 10 x 3 x 3 x f32>):
    %0.0 = convolve %input: <1 x 10 x 32 x 48 x f32> kernel %kernel: <8 x 10 x 3 x 3 x f32> strides 2, 4 padding (1, 1), (2, 2) rightDilation 2, 6
    return %0.0: <1 x 8 x 15 x 10 x f32>
}
