let input_example = read_input()

for token in input_example {

	let x = inputLayer(token)
	
	l

}


let W1 = parameter(shape: [2, 2], initial: random(from: 0.0, to: 1.0))
let b1 = parameter(shape: [2, 1], initial: random(from: 0.0, to: 1.0))

let W2 = parameter(shape: [4, 2], initial: zeros)
let b2 = parameter(shape: [4, 1], initial: zeros)
let h1 = tanh(W1 • x + b1) /// Hidden layer 1 named "h1" 
let o = softmax(W2 • h1 + b2)

let ff_nn = graph(o)



[type: float]

x: input {
    shape: [2x1] 
}

W: parameter{ shape: [2x2], initial: random(0.0, 1.0) } 
b: parameter{ shape: [2x1], initial: 0.0 }

h1,h2,h3,h4: loop(t) {

    W = parameter { shape: [2x2], initial: random(0.0, 1.0) } 
    b = parameter { shape: [2x1], initial: 0.0 }
    h1 = hidden { tanh(W * [x[t] , h4[t-1]] + b) }
    h2 = hidden { tanh(W * h1 + b) }
    h3 = hidden { tanh(W * h2 + b) }
    h4 = hidden { tanh(W * h3 + b) }

}

h1: hidden recurrent {
    W1 = parameter { shape: [2x2], initial: random(0.0, 1.0) } 
    b1 = parameter { shape: [2x1], initial: 0.0 }
    h1 = tanh(W1 * [x , h1] + b1)
}

o: output {
    W2 = parameter { shape: [4x2], initial: random(0.0, 1.0) }
    b2 = parameter { shape: [4x2], initial: 0.0 }
    o = softmax(W2 (1 - h1) + b2)
}
